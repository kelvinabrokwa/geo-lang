#!/usr/bin/env python3

import sys
import re
import json

class GeoLang:

    supported = [ 'point', 'linestring' ]

    @staticmethod
    def is_supported(g_type):
        return g_type in GeoLang.supported

class Point:
    def __init__(self, lon, lat):
        self.lon = lon
        self.lat = lat
        self.geoj = { 'type': 'Point', 'coordinates': [self.lon, self.lat] }

    def resolve(self, point):
        pass

    def to_geojson(self):
        return self.geoj

    def distance_to(self, point):
        pass

    def __add__(self, point):
        lon = self.lon + point.lon
        lat = self.lat + point.lat
        return Point(lon, lat)

    def __str__(self):
        return '(' + self.lon + ',' + self.lat + ')'

class Rect:
    def __init__(self, points):
        self.points = points

class Parser:
    @staticmethod
    def parse_point(p_str):
        p = re.sub('[\(\)]', '', p_str).split(',')
        return Point(p[0], p[1])

    def parse_linestring():
        pass

class UnsupportedGeometry(Exception):
    def __init__(self, g_type):
        self.g_type = g_type
    def __str__(self):
        return 'Error: Unsupported geometry type: ' + self.g_type

# read the source file
src = open(sys.argv[1], 'r').read()

# remove new line characters
commands = filter(lambda c: c != '\n', src.split(';'))
commands = map(lambda c: c.replace('\n', ''), commands)

for command in commands:
    tokens = command.split()
    g_type = tokens[0]
    if not GeoLang.is_supported(g_type):
        raise UnsupportedGeometry(g_type)
